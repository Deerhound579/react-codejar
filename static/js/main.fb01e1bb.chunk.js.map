{"version":3,"sources":["../../src/caret.ts","../../src/index.tsx","App.js","index.js"],"names":["setCurrentCursorPosition","el","chars","selection","window","range","createRange","document","Node","i","count","ReactCodeJar","props","editorRef","React","jar","cursorOffset","setCursorOffset","txt","element","caretOffset","doc","win","sel","preCaretRange","textRange","preCaretTextRange","getCaretOffset","useCodeJar","style","ref","highlight","editor","text","textContent","innerHTML","Prism","languages","javascript","App","useState","code","onUpdate","onClick","ReactDOM","render","getElementById"],"mappings":"mMA6DaA,EAA2B,SAACC,EAAD,GACtC,GAAIC,GAAJ,EAAgB,CACd,IAAMC,EAAYC,OAAlB,eAEMC,EAvCU,SAAdC,EAAe,EAAD,KAWlB,GANA,KACED,EAAQE,SAARF,eACAA,cACAA,iBAGF,IAAIH,QACFG,WAAiBH,EAAjBG,YACK,GAAIJ,GAAMC,QAAV,EACL,GAAID,aAAgBO,KAApB,UACMP,qBAAyBC,EAA7B,MACEA,SAAeD,cAAfC,QAEAG,WAAiBH,EAAjBG,OACAH,gBAGF,IAAK,IAAIO,EAAT,EAAgBA,EAAIR,aAApB,SACEI,EAAQC,EAAYL,aAAD,KAAnBI,GAEA,IAAIH,SAHoCO,KAU9C,SAOgBH,CAAYL,EAAI,CAAES,MAAOR,IAEvC,IACEG,eACAF,oBACAA,iBCjBOQ,EAAgC,SAAAC,GAC3C,IAAMC,EA1CkB,SAACD,GACzB,IAAMC,EAAYC,iBAAlB,MACMC,EAAMD,iBAAZ,M,EACwCA,sBAAjCE,OAAcC,OAmCrB,OAjCAH,qBAAgB,WACd,GAAKD,EAAL,QAiBA,OAfAE,UAAc,IAAI,EAAJ,EACZF,EADY,QAEZD,EAFY,UAGZA,EAHFG,SAMAA,qBAAuBH,EAAvBG,MAEAA,oBAAqB,SAAAG,GACdL,EAAL,UAEAI,ED9BwB,SAACE,GAC7B,IAGA,EAHIC,EAAJ,EACMC,EAAMF,iBAA0BA,EAAtC,SACMG,EAAMD,eAAmBA,EAA/B,aAEA,uBAAWC,EAAP,cAEF,IADAC,EAAMD,EAANC,gBACIA,WAAJ,EAAwB,CACtB,IAAIlB,EAAQiB,4BAAZ,GACIE,EAAgBnB,EAApB,aACAmB,wBACAA,SAAqBnB,EAArBmB,aAAyCnB,EAAzCmB,WACAJ,EAAcI,aAAdJ,aAEG,IAAKG,EAAMF,EAAP,YAAJ,WAA6BE,OAAuB,CACzD,IAAIE,EAAYF,EAAhB,cACIG,EAAoBL,OAAxB,kBACAK,uBACAA,4BACAN,EAAcM,OAAdN,OAEF,SCSoBO,CAAed,EAA/BI,UACAL,kBAGK,kBAAMG,UAAN,aAlBTD,IAqBAA,qBAAgB,WACTC,EAAD,SAAiBF,EAArB,UACAE,qBAAuBH,EAAvBG,MACAf,EAAyBa,EAAD,QAAxBb,MACC,CAACY,EAJJE,OAMAA,qBAAgB,WACTC,EAAD,SAAiBH,EAArB,SAEAG,wBAA0BH,EAA1BG,WACC,CAACH,EAJJE,UAMA,EAIkBc,CAAlB,GAEA,OAAO,+BAAKC,MAAOjB,EAAMiB,MAAOC,IAAKjB,K,sBClDvC,MA8BMkB,EAAYC,IAChB,MAAMC,EAAOD,EAAOE,YAEpBF,EAAOG,UAAYC,IAAML,UACvBE,EACAG,IAAMC,UAAUC,WAChB,eAgCWC,MA5BH,KAAO,MAAD,EACSzB,IAAM0B,SAzChB,2kBAwCC,mBACTC,EADS,KACHC,EADG,KAShB,OACE,6BAIE,gDACA,kBAAC,EAAD,CAAcD,KAAMA,EAAMC,SAAUA,EAAUX,UAAWA,IACzD,4BACEY,QAAS,KACPD,EAASD,KAFb,SAOA,6BAAMA,KC/DZG,IAASC,OAAO,kBAAC,EAAD,MAAStC,SAASuC,eAAe,U","file":"static/js/main.fb01e1bb.chunk.js","sourcesContent":["// Took from https://stackoverflow.com/questions/4811822/get-a-ranges-start-and-end-offsets-relative-to-its-parent-container/4812022#4812022\nexport const getCaretOffset = (element: HTMLDivElement) => {\n  let caretOffset = 0;\n  const doc = element.ownerDocument || (element as any).document;\n  const win = doc.defaultView || doc.parentWindow;\n  let sel;\n  if (typeof win.getSelection != \"undefined\") {\n    sel = win.getSelection();\n    if (sel.rangeCount > 0) {\n      var range = win.getSelection().getRangeAt(0);\n      var preCaretRange = range.cloneRange();\n      preCaretRange.selectNodeContents(element);\n      preCaretRange.setEnd(range.endContainer, range.endOffset);\n      caretOffset = preCaretRange.toString().length;\n    }\n  } else if ((sel = doc.selection) && sel.type != \"Control\") {\n    var textRange = sel.createRange();\n    var preCaretTextRange = doc.body.createTextRange();\n    preCaretTextRange.moveToElementText(element);\n    preCaretTextRange.setEndPoint(\"EndToEnd\", textRange);\n    caretOffset = preCaretTextRange.text.length;\n  }\n  return caretOffset;\n};\n\n// Took from https://jsfiddle.net/nrx9yvw9/5/\nconst createRange = (\n  el: ChildNode,\n  chars: { count: number },\n  range?: Range\n): Range => {\n  if (!range) {\n    range = document.createRange();\n    range.selectNode(el);\n    range.setStart(el, 0);\n  }\n\n  if (chars.count === 0) {\n    range.setEnd(el, chars.count);\n  } else if (el && chars.count > 0) {\n    if (el.nodeType === Node.TEXT_NODE) {\n      if (el.textContent!.length < chars.count) {\n        chars.count -= el.textContent!.length;\n      } else {\n        range.setEnd(el, chars.count);\n        chars.count = 0;\n      }\n    } else {\n      for (var i = 0; i < el.childNodes.length; i++) {\n        range = createRange(el.childNodes[i], chars, range);\n\n        if (chars.count === 0) {\n          break;\n        }\n      }\n    }\n  }\n\n  return range;\n};\n\nexport const setCurrentCursorPosition = (el: HTMLDivElement, chars: any) => {\n  if (chars >= 0) {\n    const selection = window.getSelection();\n\n    const range = createRange(el, { count: chars });\n\n    if (range) {\n      range.collapse(false);\n      selection!.removeAllRanges();\n      selection!.addRange(range);\n    }\n  }\n};\n","import * as React from \"react\";\nimport { CodeJar } from \"@medv/codejar\";\nimport { getCaretOffset, setCurrentCursorPosition } from \"./caret\";\n\ninterface Props {\n  highlight: (e: HTMLElement) => {};\n  options?: { tab: string };\n  code: string;\n  style: React.CSSProperties;\n  onUpdate: (code: string) => void;\n}\n\nexport const useCodeJar = (props: Props) => {\n  const editorRef = React.useRef<HTMLDivElement>(null);\n  const jar = React.useRef<CodeJar | null>(null);\n  const [cursorOffset, setCursorOffset] = React.useState(0);\n\n  React.useEffect(() => {\n    if (!editorRef.current) return;\n\n    jar.current = new CodeJar(\n      editorRef.current,\n      props.highlight,\n      props.options\n    );\n\n    jar.current.updateCode(props.code);\n\n    jar.current.onUpdate(txt => {\n      if (!editorRef.current) return;\n\n      setCursorOffset(getCaretOffset(editorRef.current));\n      props.onUpdate(txt);\n    });\n\n    return () => jar.current!.destroy();\n  }, []);\n\n  React.useEffect(() => {\n    if (!jar.current || !editorRef.current) return;\n    jar.current.updateCode(props.code);\n    setCurrentCursorPosition(editorRef.current, cursorOffset);\n  }, [props.code]);\n\n  React.useEffect(() => {\n    if (!jar.current || !props.options) return;\n\n    jar.current.updateOptions(props.options);\n  }, [props.options]);\n\n  return editorRef;\n};\n\nexport const ReactCodeJar: React.FC<Props> = props => {\n  const editorRef = useCodeJar(props);\n\n  return <div style={props.style} ref={editorRef}></div>;\n};\n","import React from \"react\";\n\nimport { ReactCodeJar } from \"react-codejar\";\nimport Prism from \"prismjs\";\nimport \"prismjs/themes/prism.css\";\n\nconst exampleCode = `const App = () => {\n  const [code, onUpdate] = React.useState(exampleCode);\n\n  const highlight = editor => {\n    const text = editor.textContent;\n\n    editor.innerHTML = Prism.highlight(\n      text,\n      Prism.languages.javascript,\n      \"javascript\"\n    );\n  };\n\n  const editorRef = useCodeJar({\n    code,\n    onUpdate,\n    highlight\n  });\n\n  return (\n    <div>\n      <h5>Using hooks: </h5>\n      <div ref={editorRef}></div>\n\n      <h5>Using component:</h5>\n      <ReactCodeJar code={code} onUpdate={onUpdate} highlight={highlight} />\n    </div>\n  );\n};`;\n\nconst highlight = editor => {\n  const text = editor.textContent;\n\n  editor.innerHTML = Prism.highlight(\n    text,\n    Prism.languages.javascript,\n    \"javascript\"\n  );\n};\n\nconst App = () => {\n  const [code, onUpdate] = React.useState(exampleCode);\n\n  // const editorRef = useCodeJar({\n  //   code,\n  //   onUpdate,\n  //   highlight\n  // });\n\n  return (\n    <div>\n      {/* <h5>Using hooks: </h5> */}\n      {/* <div ref={editorRef}></div> */}\n\n      <h5>Using component:</h5>\n      <ReactCodeJar code={code} onUpdate={onUpdate} highlight={highlight} />\n      <button\n        onClick={() => {\n          onUpdate(code);\n        }}\n      >\n        Reset\n      </button>\n      <pre>{code}</pre>\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}